// Code generated by gnorm, DO NOT EDIT!

/* eslint-disable no-unused-vars */
import {
	GraphQLID,
  GraphQLInterfaceType,
  GraphQLNonNull,
  GraphQLObjectType,
	GraphQLString,
	GraphQLInt,
  GraphQLFloat,
} from 'graphql';

import {GraphQLDateTime} from 'graphql-iso-date';
import {globalIdField} from 'graphql-relay';

import * as enums from './enums';
{{- $table := .Table.DBName -}}
{{- $schema := .Table.Schema.DBName -}}
{{- $colsByName := .Table.ColumnsByName }}
{{- $nonPKDBNames := .Table.Columns.DBNames.Sorted.Except .Table.PrimaryKeys.DBNames}}

{{- if .Table.FKRefsByName }}
// Import referenced tables
{{- range $key, $value := .Table.FKRefsByName }}
import { {{ pascal $value.Table.Name }} } from './{{ pascal $value.Table.Name }}.graphql';
{{- end }}
{{- end }}
/* eslint-enable no-unused-vars */

export const {{pascal $table}} = new GraphQLObjectType({
	name: '{{pascal $table}}',
	{{- /* TODO: handle array */}}
  uniqueKey: 'id',
  sqlTable: '{{.Table.DBName}}',
	fields: () => ({
	{{- range .Table.PrimaryKeys.DBNames.Sorted }}{{ with (index $colsByName .)}}
		{{ .Name }}: {{ if .IsArray }}[]{{ end }}GraphQLNonNull(GraphQLID), {{end}}
	{{- end }}
	{{- range $nonPKDBNames }}{{ with (index $colsByName .) }}
		{{ .Name }}: {{ if .IsArray }}[]{{ end }}{{ .Type }}, {{end}}
	{{- end }}
	{{- if .Table.FKRefsByName }}
		// Relations
		{{- range $key, $value := .Table.FKRefsByName }}
		{{ camel $value.TableDBName }}: {
				type: GraphQLNonNull({{ pascal $value.TableDBName }}),
				sqlJoin: ({{ camel $table }}Table, {{ camel $value.Table.Name }}Table) =>
						`${{"{"}}{{ $table }}Table{{"}"}}.{{ index $value.FKColumns.ColumnDBNames 0 }} = ${{"{"}}{{ $value.Table.Name }}Table{{"}"}}.{{ index $value.FKColumns.RefColumnDBNames 0 }}`
		},
		{{- end }}
	{{- end }}
	}),
})
