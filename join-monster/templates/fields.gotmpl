// Code generated by gnorm, DO NOT EDIT!

package {{.Params.RootPkg}}

import (
    "github.com/lib/pq"
	"github.com/lib/pq/hstore"
	uuid "github.com/gofrs/uuid"
	"github.com/pkg/errors"
)

{{ range (makeSlice "Jsonb" "int" "int32" "string" "sql.NullString" "int64" "sql.NullInt64" "float64" "sql.NullFloat64" "bool" "sql.NullBool" "time.Time" "pq.NullTime" "uint32"  "uuid.UUID" "uuid.NullUUID" "hstore.Hstore" "Bytea") }}
{{ $fieldName := title (replace . "." "" 1) }}
// {{$fieldName}}Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type {{$fieldName}}Field string

// Equals returns a WhereClause for this field.
func (f {{$fieldName}}Field) Equals(v {{.}}) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f {{$fieldName}}Field) GreaterThan(v {{.}}) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f {{$fieldName}}Field) LessThan(v {{.}}) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f {{$fieldName}}Field) GreaterOrEqual(v {{.}}) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f {{$fieldName}}Field) LessOrEqual(v {{.}}) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f {{$fieldName}}Field) NotEqual(v {{.}}) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f {{$fieldName}}Field) In(vals []{{.}}) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals: values,
	}
}

{{end}}

{{ range (makeSlice "Jsonb" "sql.NullString" "sql.NullInt64" "sql.NullFloat64" "sql.NullBool" "pq.NullTime" "uuid.NullUUID") }}
{{ $fieldName := title (replace . "." "" 1) }}
// IsNull returns a WhereClause that matches when this field is NULL.
func (f {{$fieldName}}Field) IsNull() NullClause {
	return NullClause{
		Field: string(f),
		Null: true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f {{$fieldName}}Field) IsNotNull() NullClause {
	return NullClause{
		Field: string(f),
		Null: false,
	}
}

{{end}}

